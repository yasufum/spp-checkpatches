#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

for file in `git diff-index --cached --name-only HEAD`; do
	LEN=`wc -L ${file}`
	if [ "`echo ${LEN%% *}`" -gt 998 ]
	then
		echo "$file exceed max character 998, exit 1"
		exit 1
	fi

	case "${file##*.}" in
	py)
		pycodestyle $file || exit 1;
		;;
	*)
		;;
	esac
done

x=80
numLine=0
echo 0 > ./kazu
git diff --cached > ./test

while read line

  do

      if
         [ $((`echo "$line" | wc -m` -1 )) -le $x ]; then
         numLine=$((numLine + 1))
         echo 0 >> ./kazu

      elif
         echo "$line" | grep '^\+.*' >/dev/null  ; then
         numLine=$((numLine + 1))
         echo ----------------------------------
         echo WARNING:LONG_LINE: line over 80 characters
         echo $numLine:$line
         echo ----------------------------------
         echo 1  >>  ./kazu

      else
         numLine=$((numLine + 1))
         echo 0  >>  ./kazu
      fi

  done < ./test
rm  ./test

while read line

  do

      if [ $line -gt  0 ] ; then
         rm ./kazu

         exit 2

      fi

  done < ./kazu

exit

# work directory
export SPP_HOME=`pwd`
export SPP_DIR=`basename ${SPP_HOME}`
export GIT_WORK=${MY_GIT_WORK:-${HOME:-/home/`whoami`}/git_work}
mkdir -p ${GIT_WORK}

# Compile Check & checkpatch
export RTE_SDK=${GIT_WORK}/dpdk
export RTE_TARGET=x86_64-native-linuxapp-gcc
if [ ! -e $RTE_SDK ]
then
	echo "$RTE_SDK does not exist, download."
	cd ${GIT_WORK}
	git clone -b releases http://dpdk.org/git/dpdk
	cd ${SPP_HOME}
else
	cd ${RTE_SDK}
	git fetch origin
	if [ ! -z "`git diff origin/releases`" ]
	then
		echo "$RTE_SDK is an old file, to checkout."
		rm -rf ${RTE_SDK}/${RTE_TARGET}
		git checkout releases .
	fi
	cd ${SPP_HOME}
fi

# checkpatch.sh of DPDK
export CHECK_PATCH_FILE=`whoami`_`date "+%Y%m%d-%H%M%S"`.patch
echo "Signed-off-by:" > /tmp/${CHECK_PATCH_FILE}
git diff --cached >> /tmp/${CHECK_PATCH_FILE}

export DPDK_CHECKPATCH_PATH=`find /usr/src -name checkpatch.pl | xargs ls -t | head -1`

${RTE_SDK}/devtools/checkpatches.sh /tmp/${CHECK_PATCH_FILE}
RET=${?}
rm /tmp/${CHECK_PATCH_FILE}
if [ "${RET}" -ne 0 ]
then
	exit 1
fi

# If there are white space errors, print the offending file names and fail.
git diff-index --check --cached $against --
RET=${?}
if [ "${RET}" -ne 0 ]
then
	exit 1
fi

# Check file in "src" directory
if [ -z "`git diff-index --cached --name-only HEAD | grep ^src/`" ]
then
	exit 0
fi

# DPDK compile
if [ ! -e "${RTE_SDK}/${RTE_TARGET}" ]
then
	cd ${RTE_SDK}
	make T=x86_64-native-linuxapp-gcc install
	cd ${SPP_HOME}
fi

# SPP compile
# If make are failed, exit 1
rm -rf ${GIT_WORK}/${SPP_DIR:-Soft-Patch-Panel}
cp -rp ${SPP_HOME} ${GIT_WORK}/.
cd ${GIT_WORK}/${SPP_DIR}
make clean
make
